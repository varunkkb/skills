------Git------------

stages
-modified
-staged
-commited

initialize git monitoring files and folders in a dir 
>>git init

check status 
>>git status

create user
>>git config --global user.name 'name'

create email
>>git config --global user.email 'emailaddress'

git opens defult editor Vim to change
>>git config --system core.editor vim

assigning alias commands
>>git config --global alias."alias command" "alias orignal command"

check config file
>>cat ~/.gitconfig

adding files/folders to stagged stage
>>git add .
above adds all the files and folders modified to stagged stage 
to add just specific files mention file  names in the git command
>> git add filename

ignore the files/folders by git use .ignore file within same folder where the git is initilized
>> just add file/folder names that you want git to untrack

commiting files from staged stage to commited stage
>>git commit

check commits log
>>git log --oneline

check config
>>cat .gitconfig

--Branches-- 
branches are the copy of the main/master branch
check which branch HEAD is pointing at simply it will show *master if pointing at other branch then it would be  *other
>>git branch
output: *master
         other

create branch 
>>git branch branchname

pointing at branch
>>git checkout branchname
>>git switch branchname
note: switch/checkout both has same function ,to check the status, within .git dir navigate to HEAD file it should be pointing to specific branchname entered in the command 
HEAD file content : ref: refs/heads/branchname

create branch and switch to branch, below both functions same
>>git switch -c branchname
>>git checkout -b branchname

deleting branch
>>git branch -d branchname

Merging branches
>>git merge branchname

check diffrence of contents of same file at diffrent versions when it in staged
>> git diff --staged
output:
--- a/filename (this shows old content)
+++ b/filename (this shows new content)
- content in red is removed
+ content in green added

get the content diffrence between commit IDs
>>git diff ID1 ID2

get diffrence between branches
>>git diff branch1 branch2

conflicting changes do not allow to switch branch without commit
git stash used to save changes and move to other branch 
>> git stash 
used to get back saved vhenges in the branch back, add and commit when needed
>>git stash pop
stash can be moved to out branchs
>>git stash pop (after switched to other branch)
to list stash list
>>git stash list
output: stash@{0} WIP on mastet: ID 
apply stash you want to apply
>>git stash apply stash@{3}

to move to previous commits
>>git checkout commitid

move back to latest from old commits both works
>>git checkout master
>>git reflog


rebase deletes the history and ment to be applied on the branches not on the master/main branch
>>git rebase branchname (make sure you are on diffrent branch not in main/master)
learn more about rebase

--------github------------
n 























