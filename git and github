------Git------------
Git is a version control software

stages
-modified
-staged
-commited

initialize git monitoring files and folders in a dir 
>>git init

check status 
>>git status
shows untracked files

create user
>>git config --global user.name 'name'

create email
>>git config --global user.email 'emailaddress'

git opens defult editor Vim to change
>>git config --system core.editor vim

assigning alias commands
>>git config --global alias."alias command" "alias orignal command"

check config file
>>cat ~/.gitconfig

adding files/folders to stagged stage
>>git add .
above adds all the files and folders modified to stagged stage 
to add just specific files mention file  names in the git command
>> git add filename

ignore the files/folders by git use .ignore file within same folder where the git is initilized
>> just add file/folder names that you want git to untrack

commiting files from staged stage to commited stage
>>git commit

check commits log
>>git log --oneline
>>git log branchname

check config
>>cat .gitconfig

--Branches-- 
branches are the copy of the main/master branch
check which branch HEAD is pointing at simply it will show *master if pointing at other branch then it would be  *other
>>git branch
output: *master
         other

create branch 
>>git branch branchname

pointing at branch
>>git checkout branchname
>>git switch branchname
note: switch/checkout both has same function ,to check the status, within .git dir navigate to HEAD file it should be pointing to specific branchname entered in the command 
HEAD file content : ref: refs/heads/branchname

create branch and switch to branch, below both functions same
>>git switch -c branchname
>>git checkout -b branchname

deleting branch
>>git branch -d branchname

Merging branches
>>git merge branchname

cherry-pick is to pick speciic commit
>>git xhwrry-pixk commitid


check diffrence of contents of same file at diffrent versions when it in staged
>> git diff --staged
output:
--- a/filename (this shows old content)
+++ b/filename (this shows new content)
- content in red is removed
+ content in green added

get the content diffrence between commit IDs
>>git diff ID1 ID2

get diffrence between branches
>>git diff branch1 branch2

conflicting changes do not allow to switch branch without commit
git stash used to save changes and move to other branch 
>> git stash 
used to get back saved vhenges in the branch back, add and commit when needed
>>git stash pop
stash can be moved to out branchs
>>git stash pop (after switched to other branch)
to list stash list
>>git stash list
output: stash@{0} WIP on mastet: ID 
apply stash you want to apply
>>git stash apply stash@{3}

to move to previous commits
>>git checkout commitid

move back to latest from old commits both works
>>git checkout master
>>git reflog

rename branch name 
>>git branch -M branchname

rebase deletes the history and ment to be applied on the branches not on the master/main branch
>>git rebase branchname (make sure you are on diffrent branch not in main/master)
learn more about rebase

branching strategies
>master/main 
The purpose of the main branch in the Git flow workflow is to contain production-ready code that can be released.
>develop
The develop branch is created at the start of a project and is maintained throughout the development process, and contains pre-production code with newly developed features that are in the process of being tested.
>feature 
The feature branch is the most common type of branch in the Git flow workflow. It is used when adding new features to your code.
>release
The release branch should be used when preparing new production releases.
>hotfix
The hotfix branch is used to quickly address necessary changes in your main branch.
The base of the hotfix branch should be your main branch and should be merged back into both the main and develop branches.
1. A develop branch is created from main
2. A release branch is created from develop
3. Feature branches are created from develop
4. When a feature is complete it is merged into the develop branch
5. When the release branch is done it is merged into develop and main
6. If an issue in main is detected a hotfix branch is created from main
7. Once the hotfix is complete it is merged to both develop and main


--------github------------
github is a distributed version control service uses git software
alternatives to github is gitlab, bitbucket
github uses ssh to allow you to push code
password based code push is not allowed


create repo in github
        > repo-name
        > description
        > public/private
        > add readme file (optional)
         
to add remote repository
>>git remote add origin "repo URL"

to push to remote repo
>>git push -u origin branchname
note: -u setup an upstream onetime that allows you to run future command git push wihout mention of -u
>>git push

rename remote reponame
>>git remtote rename oldname newname

check remote version url push/fetch
>>git remote -v

readme.md
.md markdown file

clone repo
>>git clone URL
URL is the github repo
cloning repo will set the remote as default from clone command URL

get info but dont put in work area
>>git fetch

get info and add it in my work
git pull = git fetch + git merge
>>git pull

github features
-codespace
-opensource contributions

----opensource contributions steps-----
fork repo work on that and pull reqest to opensource codebase 
Talk- because no one knows what you are working on
open an issue (adding feature, fixing bug)
get the issue assiged
make PR (pull request) and iterate over it

adding remote repo and pull/push via ssh
step1. create ssh key  >>ssh-keygen -t rsa
step2.  cd to /users/username/.ssh
step3. copy contents of id_rsa.pub to Github add ssh key



Interview questions
>how to initialize git in a direcorty
>clone vs fork
>merge vs rebase





















