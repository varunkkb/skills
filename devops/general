--Creating VMs in cloud--

  creatin needs API which needs to validate,autuntecate,authorize to create

  can be created using AWS GUI   
  AWS CLI 
  AWS API-- one application is Boto3 [using boto3 can connect to Azure using its API)
  AWS CFT vs AWS CDK

Accessing VM 
  -AWS console (not convient, session also expires fast)
  -desktop app CLI terminal ( Mac: iterm, windows: mobaXterm)
using command line and Publi IP address to connect to instance , download private key from aws user portal
  $ ssh user@IPaddress (this will denal the connecction)
  $ ssh -i /user/path/downloads/authkey.pem user@IPaddress (faile to connect need to change permissions of the private key to use : changin chmod of key file with 600)
  
to delete the instance in portal
- stop the instance
- terminate the instance

--configuring AWS CLI--
AWS CLI - works with vaious services operating in AWS and flexible to run commands
to download AWS cli , download it from AWS website (linux, windows, max installers)
to show aws cli is installed or not type $aws which  output:/usr/local/bin/aws
AWS CLI needs to authenticate access keys with credentials to connect to user (aws protal /user options/security credentials/ click on create access key key value pair )
note: secreate key should be stored in secure vault or somewhere secure
to configure user with AWS CLI
-$aws configure
-Aws access key ID : enter here
-Aws secrete  access key : enter here
-reagion leave default
-outformat leave json default
-connected

Aws CLI commands
-to list S3 buckets : $aws s3 ls
all templates are available in website


Day6- Linuz and shell scripting (nothing in the video need to search below in chatGpt)
shell commands popiular need to automate and health checks and use cases search
top 
df -h
chmod
free
nproc
ps -ef
grep
awk
cURL
wget
find
trap
kill
wc
jq [jq is json parser]
vim,vi are interactive
touch - is non interactive
shell script starts with various shells depends on what you want to use
#!/bin/bash
       /ksh
       /sh
       /dash
       /aix
possible interview question shell types

permissions and groups 
777 user,group,others
4 write
2 read
1 execute

in shell scripting if you having multiple commands executed and out is mess use 
set -x   #debuug mod
set -e   #exit the script if error  
set -o   #pipefail 
set -e and set -o both needs to be used together because set -e ignores pipe failures so for pipe failures need to add set -e

stdin and stdout 
date command is sending out put to stdin so | doesnt work
ps -ef | grep string | awk -F" " '{print $2}' 
above prints the 2nd coloum from the sp-ef with string match from that line

fetch logs,packages,post values to url
curl -X GET websiteaddress [to get values]
curl -o [incrementall download doesn't puts burden on memory while downloding]

wget downloads the file , also has incremental download
wget url

substuite user super user
sudo su -  
switch user to user
su user

loops ifelse, forloops
check about trap signals 
crontabs

Interview questions
-list the commmon commands
-write a shell script to list all files or process ID in processlist
-crontab
-vim read only mode
-softlink and hardlink
-break and continue commands
-disadvantages of shell scripting
-diffrent types of loops and uses
-dynamically typed and statically typed
-network debuging shell commands (traceroute)
-how to sort names (linux has native command called sort)
- how will you manage logs of a system that generate huge logs files everyday (logrotate)


Shell script
x=missossopi
grep -o "s" < <<"$x" | wc -l
this will optput letter count in a word
   -o only
   "s" just s alphabet
   $x assigned value


Aws ClI commands can be sued in shell scripting - docs available in aws website
aws s3 ls                  [lists s3 buckets]
aws ec2 describe-instances [list Ec2 instances]
aws lambda list-functions  [list lambda]
aws iam list-users         [list IAM users]

aws ec2 describe-instances [this will out put the details in Json formate] to parse the Json below we are using jq
each object has Reservations[], Instances[] arrays

$aws ec2 describe-instances | jq '.Reservations[].Instances[].InstanceId'
this will output the instances IDs

$aws s3 ls >> resourceTracker [resourceTracker this will output details in to file]

Day8 - https://github.com/iam-veeramalla/shell-scripting-projects/blob/main/github-api/list-users.sh
shell script project Github ApI Integration

Day9-day11 Git and Git hub 

day12 -creating Ec2 instance - creating NSG to open port - deployinh node app

Day13 - AWS services Top 15
Ec2, VPC, EBS, S3, IAM, cloudwatch,LAMBDA,cloud build services [aws code pipeline,code build, code deploy],aws confiration,billing and costing ,Aws KMS, cloud Trail,EKS, fargate , ECS,ELK)     
good to have
ML- Tenserflow

Day14 - Configuration managment
puppet, ansible ,chef,salt 

uses 
1.upgrades
2.secure patches
3.installation

diffrence between puppet and ansible
-ansible is push model, agentless,easy, yaml
-puppet is pull model, master slave , puppet language

ansible dynamic inventry (custom library/modules read more) 
ansible galaxy module development using pyton

disavvantages with ansible
 -some sight issues with windows
 -debugging issue
 -performance san be imporved

interview questions
-what is the programming language uses , can you wrte you own modules
-which operatig sysyesm it suppots (linux: ssh, windows win rm)
-puppet vs ansible vs  chef
-what machenisih ansible uses
-what programming language it uses (YAML)
-does it support all cloud provides (it doesn depend on cloud supports it just need machiens tobe publically accessible and have access to ssh/winrm
-ansible adhoc vs commands and pllaybooks 

Day 15 ansible zero to hero
install ansible in server
-sudo apt install ansible
-refere the ansible doc for more details
-install key 
-$ssh-keygen [key gen run on ansible server copy] this creates files at path /home/ubuntu/.ssh [authorised_keys, id_rsa, id_rsa.pub, known_hosts]
-run same command on destination server [copy id_rsa.pub key from ansible server to target server authorized_keys file] 

adding target servers in ansible server
-add  IP address of target servers in inventory file at /ansible/inventory

note ansible commands can be run in commandline aswel [ ansible adhoc commands]
-creating file on target machine
  $ansible -i inventory all -m "shell" -a "touch filename"
  -m modules [ -m is used to run shell] 

grouping of servers list in inventory
inside invontory file
  [groupname]
  list IPs below

running command  $ansible -i inventory groupname all -m "shell" -a "touch filename"

ansible playbooks - works when to execute set of commands
- create file filename.yml
- open file and start with --- (enter three --- )
- if needed to write multiple playbook in same file then start second with -name again below that
   --file start--
   ---
   - name: install ans start nginx
     hosts: all
     become: root   [ comment : dont have to mention root here id the user running the ansible script has persmission to run script]

     tasks:
     - name: install nginx
       apt:
          name: nginx
          state: present
     - name: start nginx
       service:
        name: nginx
        state: started
    --file end---

to run the ansible playbook 
-$ansible-playbook -v -i inventory playbookfilename.yml
-v means debug [ to get the steps as output]

Ansible roles
- it is used to write structured and efficient playbooks in whcih you need to write very large tasks
- to create roles $ ansible-galaxy role init rolename
- this created bunch of files in same dirctory better to creaate seperate folder while creating it
- check ansible docks for sample playbooks

this ansible plabook main diroctory will have file named site.yml 
 -hosts:all 
  roles:
      -rolename2
      -rolename1

https://github.com/ansible/ansible-examples
within role roles/rolename1 folder there will be tasks folder with main.yml for each role
other folders 
meta- the give meta details 
defaults are used to store default values
test to wirte test scripts
handlers  
tasks
readme.md to write some details 
files are used to store certficates , anyfiles
templates 

Day 16 Infrastructure as code terraform
Terraform is converting configuration to target api requests to various cloud providers
API as code

Day 17 Evertung about Terraform
aws configure needs to be configured to authenticate
https://github.com/iam-veeramalla/terraform-zero-to-hero/tree/main/Day-1
write, plan, apply, destroy [ life cycle]
terraform init ----Initialize
terraform plan ----dry run
terraform apply 

main.tf where the tera form tasks are written
outputs.tf is the file where outputs are configured
variables.tf where variables are written
terraform.tfstate file terraform tracks the changes [usually stored remotely , no mannual changes should me made]

usual arcitecture is jenkins monitors for github(terraform files) and runs it on aws 
terraform s3 bucket is stored in s3 bucket - is connected with DynamoDb so that stae file is locked in case same chanes are made by two users can have conflicting parller case
creating these both changes in remote.tf
modules are way of witing reusable code the about config is written in module so other terraform scripts can make use of it

chanllenges with terraform
-state file is single source of truth
-manual changes to the cloud provider cannot be identified and auto-corrected
-not a gitops friendly tool.Dont't play well with flux or argo CD
-can become very complex and difficult to manage
-Trying to position as a configuration managment tool as well [example terraform being used as ansible]

Day18 - introduction to CICD

unit testng - testing specific functionality
static code analysis 
code quality /vulnerbility
automation testing
reporting
deployment

dev/stage/production stages

Day19 Jenkins zeroto hero
Jenkins is the not the best solution alternatives (github actions, github pipelines, circleCI)

install Jenkins
prerequisite is java to be installed , jenkins is java based

after installing Jenkins temp pws will be saved at location to initally login to jenkins portal
/var/lib.jenkins/secretes/initialAdminPassword
install sugested plugins 
create user and change passwd

architecure
jenkins master node
jenkins worker nodes 

This archtecture is not good if variety of applications are to be installed 
also worker node and master nodes are always up even when there is no request sent to master/worker node - nodes are sitting ideal


to restart jenkins via web broser Ip:8080/restart

















-







  

